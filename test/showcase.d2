# Shapes and connections
Stage One -> Stage Two -> Stage Three: repeat

# Blocks
b <-> c: "Reality is just a crutch for people who can't handle science fiction" {
  # "Special" keywords are highlighted
  target-arrowhead: * {
    shape: diamond
    label: 1
    style.filled: true
    _.underscore_name_._.fill -> presents: regift
  }

  # Label constraints and constants
  id: int {constraint: primary_key}
  id: int {constraint: [primary_key; foreign_key; unique; PK; FK; UNQ; random word]}
  number: -122
  float: -122.321
  boolean: true
  escapes: {x: \{\}\[\]\n\;; y: z}

  # Fields and Methods
  +publicVar: io.RuneReader
  -privateVar: d2ast.Position
  \#protectedMethod(n int): (s string, eof bool)
}

""" Connection References
and multiline comments"""
(x -> y)[0].style.stroke: red

# Injections
explanation: |md
  # I can do headers
  1. test
|
explanation: |
  # No language
  1. Equals markdown
|
explanation: |go
  var awsSession = From(c.Request.Context())
|
my_code: ||ts
  declare function getSmallPet(): Fish | Bird;
||
my_code: |||d2
  x: true || false
|||
my_code: |`ts
  const works = (a > 1) || (b < 2)
`|

# Imports
...@people.management
x: @x.d2
x: @x
x: {
  ...@x.d2
}
x: @../y.d2

# Globs
test.*.test.*.test : label
test.**.test.**.test : label
test.***.test.***.test : label
t*st.*.t*st.*.t*st : label
(lady* -> barbie)[*].style.stroke: pink
*: { &shape: person }
*: { !&shape: person }

# Variables
server1: ${server-name}-1
button: {
  style: {
    fill: ${primaryColors.button.active}
    stroke: ${primaryColors.button.border}
  }
}
lb: ${region} load balancer
zone1: {
  server: ${region} API
}
x: 'Send field ${names}'
x: "Send field ${names}"
data: {
  a: int {constraint: [PK; ...${base-constraints}]}
}
custom-disclaimer: DRAFT DISCLAIMER {
  ...${disclaimer}
}
    _.underscore_name_._.fill -> presents: regift
